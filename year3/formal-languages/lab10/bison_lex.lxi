%{
#include "bison.tab.h"

FILE * output;
char * dataSegment;
char * codeSegment;
int yyerror(char * s);
int yyparse();
%}

%option noyywrap

%%

"int" { return int_token; }
"main" { return main_token; }
"cin" { return cin_token; }
"cout" { return cout_token; }
"+" { return '+' ; }
"-" { return '-'; }
"%" { return '%' ; }
">" { return '>'; }
"<" { return '<'; }
"=" { return '='; }
">>" { return cin_operator; }
"<<" { return cout_operator; }
">=" { return operator_rel; }
"<=" { return operator_rel; }
"==" { return operator_rel; }
"," { return ','; }
"!=" { return different_token; }
";" { return ';'; }
"{" { return '{'; }
"}" { return '}'; }
"(" { return '('; }
")" { return ')'; }
"#" { return '#'; }

([a-zA-Z][a-zA-Z0-9]*) strcpy(yylval.string, yytext); return ID;
([0-9]+) strcpy(yylval.string, yytext); return CONST_INTREAGA;
[ \n\t]	
. return 0;

%%

void addDataSegment(char segment[1000]) {
  strcat(dataSegment, segment);
}

void addCodeSegment(char segment[1000]) {
  strcat(codeSegment, segment);
}
int yyerror(char * s) {
  printf("%s\n", s);
  return 1;
}
int main(void) { 
	output = fopen("output.asm","w");

	dataSegment = malloc(3000 * sizeof(char));
	dataSegment[0] = '\0';

	codeSegment = malloc(3000 * sizeof(char));
	codeSegment[0] = '\0';

	addDataSegment("\nsegment data use32 class=data\n");
	addDataSegment("\t_format db \"Print: %d\", 10, 0\n");
	addDataSegment("\t_sformat db \"%d\", 0\n");

	addCodeSegment("segment code use32 class=code\n");
	addCodeSegment("start:\n");
	int val = yyparse(); 

	fprintf(output, "bits 32\n");
	fprintf(output, "global start\n");
	fprintf(output, "extern exit, printf, scanf\n");
	fprintf(output, "import exit msvcrt.dll \n");
	fprintf(output, "import printf msvcrt.dll \n");
	fprintf(output, "import scanf msvcrt.dll \n");

	fprintf(output, "%s\n\n", dataSegment);
	fprintf(output, "%s\n\n", codeSegment);
	return val;
}

